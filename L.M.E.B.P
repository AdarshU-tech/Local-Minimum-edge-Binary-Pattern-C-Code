#include<stdio.h>
#include<conio.h>
#include<time.h>
#include<math.h>

void swap(int *a, int *b)
{
int temp = *a;
*a = *b;
*b = temp;
}

// bubble sort function
void *bubbleSort(int *array[],int *array1[], int n)
{
int i, j;
for (i = 0; i < n-1; i++)
    {
        for (j = 0; j < n-i-1; j++) if (array[j] < array[j+1])
        {
            swap(&array[j], &array[j+1]);
            swap(&array1[j], &array1[j+1]);
}}


//
//printf(" %d %d %d %d %d %d %d %d \n",array1[0],array1[1],array1[2],array1[3],array1[4],array1[5],array1[6],array1[7]);


return array1;
}

void main()
{

    int i,j,n,a[100][100],k,lm[100][100][8],l=0,lm_sign[100][100][8],lmebp[8][1000],final_cost[8];
    clock_t start, end;
    double cpu_time_used;

    printf("ENTER N VALUE: ");
    scanf("%d",&n);


    printf("\nENTER N VALUES:\n");
    for (i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
        {
        scanf("%d",&a[i][j]);
        }

    }
    //int lmebp[(n-2)*(n-2)];
  start=clock();

    for (i=1;i<n-1;i++)
    {

        for(j=1;j<n-1;j++)
        {
            if(a[i][j]-a[i][j+1]>0)
            {

                lm[i][j][l]=(a[i][j]-a[i][j+1]);
                lm_sign[i][j][l]=0;

                //printf("HERE IS %d negetive of %d %d \n",lm_sign[i][j][l],i,j);
            }
            else
            {
                lm[i][j][l]=a[i][j+1]-a[i][j];
                lm_sign[i][j][l]=1;
                //printf("HERE IS %d of %d %d\n",lm_sign[i][j][l],i,j);
            }


            l++;

            if(a[i][j]-a[i-1][j+1]>0)
            {

                lm[i][j][l]=(a[i][j]-a[i-1][j+1]);
                lm_sign[i][j][l]=0;
                //printf("HERE IS %d negetive of %d %d \n",lm_sign[i][j][l],i,j);
            }
            else
            {
                lm[i][j][l]=a[i-1][j+1]-a[i][j];
                lm_sign[i][j][l]=1;
                //printf("HERE IS %d of %d %d\n",lm_sign[i][j][l],i,j);
            }

            l++;
            if(a[i][j]-a[i-1][j]>0)
            {

                lm[i][j][l]=(a[i][j]-a[i-1][j]);
                lm_sign[i][j][l]=0;
                //printf("HERE IS %d negetive of %d %d \n",lm_sign[i][j][l],i,j);
            }
            else
            {
                lm[i][j][l]=a[i-1][j]-a[i][j];
                lm_sign[i][j][l]=1;
                //printf("HERE IS %d of %d %d\n",lm_sign[i][j][l],i,j);
            }
    l++;
            if(a[i][j]-a[i-1][j-1]>0)
            {

                lm[i][j][l]=(a[i][j]-a[i-1][j-1]);
                lm_sign[i][j][l]=0;
                //printf("HERE IS %d negetive of %d %d \n",lm_sign[i][j][l],i,j);
            }
            else
            {
                lm[i][j][l]=a[i-1][j-1]-a[i][j];
                lm_sign[i][j][l]=1;
                //printf("HERE IS %d of %d %d\n",lm_sign[i][j][l],i,j);
            }
   l++;
            if(a[i][j]-a[i][j-1]>0)
            {

                lm[i][j][l]=(a[i][j]-a[i][j-1]);
                lm_sign[i][j][l]=0;
                //printf("HERE IS %d negetive of %d %d \n",lm_sign[i][j][l],i,j);
            }
            else
            {
                lm[i][j][l]=a[i][j-1]-a[i][j];
                lm_sign[i][j][l]=1;
                //printf("HERE IS %d of %d %d\n",lm_sign[i][j][l],i,j);
            }
    l++;
            if(a[i][j]-a[i+1][j-1]>0)
            {

                lm[i][j][l]=(a[i][j]-a[i+1][j-1]);
                lm_sign[i][j][l]=0;
                //printf("HERE IS %d negetive of %d %d \n",lm_sign[i][j][l],i,j);
            }
            else
            {
                lm[i][j][l]=a[i+1][j-1]-a[i][j];
                lm_sign[i][j][l]=1;
                //printf("HERE IS %d of %d %d\n",lm_sign[i][j][l],i,j);
            }
l++;
            if(a[i][j]-a[i+1][j]>0)
            {

                lm[i][j][l]=(a[i][j]-a[i+1][j]);
                lm_sign[i][j][l]=0;
                //printf("HERE IS %d negetive of %d %d \n",lm_sign[i][j][l],i,j);
            }
            else
            {
                lm[i][j][l]=a[i+1][j]-a[i][j];
                lm_sign[i][j][l]=1;
                //printf("HERE IS %d of %d %d\n",lm_sign[i][j][l],i,j);
            }
l++;
            if(a[i][j]-a[i+1][j+1]>0)
            {

                lm[i][j][l]=(a[i][j]-a[i+1][j+1]);
                lm_sign[i][j][l]=0;
                //printf("HERE IS %d negetive of %d %d \n",lm_sign[i][j][l],i,j);
            }
            else
            {
                lm[i][j][l]=a[i+1][j+1]-a[i][j];
                lm_sign[i][j][l]=1;
                //printf("HERE IS %d of %d %d\n",lm_sign[i][j][l],i,j);
            }

l=0;
        }

    }

    printf("\nHistogram:\n");


    for (i = 1; i < n-1; i++)
    {
        for (j = 1; j < n-1; j++)
        {



        bubbleSort(&lm[i][j],&lm_sign[i][j],8);

        }}



    printf("___________________________\n");
    printf("STORED HISTOGRAMS ARE:\n");
        for (i=1;i<n-1;i++)
        {

        for(j=1;j<n-1;j++)
        {
            for(l=0;l<8;l++)
            {
            //printf("%d -- ",lm[i][j][l]);
            printf("   %d ",lm_sign[i][j][l]);
            }
        printf("  For %d , %d",i,j);
        printf(" \n");
        }
        printf("\n");
    }

int count=0;
k=0;

while(count<8){
       // printf("inside while");
    for(i=1;i<(n-1);i++){
  //              printf("inside i");

            for(j=1;j<n-1;j++){
 //                       printf("inside j");
//printf("count- %d k %d",count,k);
//lmebp[0][0]=lm_sign[1][1][count];
                lmebp[count][k]=lm_sign[i][j][count];
  //printf("reach 1");
                printf("%d  ",lmebp[count][k]);
//printf("reach 2");
                k++;
            }

            }
            printf("\n");
        count++;
        k=0;
}
printf("\n THE 8 LMEBP VALUES ARE:\n");
int sum=0;
//j=0;
for(i=0;i<8;i++){
for(j=0;j<((n-2)*(n-2));j++){
sum= sum+ (lmebp[i][j] * pow(2,j));
}
printf("%d\n", sum);
//final_cost[i]=sum;
sum=0;
}


end=clock();
cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
printf("\nTime Taken: %f", cpu_time_used);
}
